#include<bits/stdc++.h>
using namespace std;
#define N 100005
#define pb push_back
vector<int>adj[N];

int ans;
void add_edge(int x,int y){
    adj[x].pb(y);
    adj[y].pb(x);
}
void bfs(int src,int n,int& ans){
    vector<int>dist(n+1,INT_MAX);
    queue<int>q;
    q.push(src);
    dist[src]=0;
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto neigh:adj[node]){
            if(dist[neigh]==INT_MAX){
                //push the unvisited node in queue
                q.push(neigh);
                dist[neigh]=dist[node]+1;
            }
            else if(dist[neigh]>=dist[node]){
                //backedge is encountered so update our ans
                ans=min(ans,dist[neigh]+dist[node]+1);
            }
        }
    }
}
int main(){
    int n;
    cin>>n;
    add_edge(1,2);
    add_edge(1,3);
    add_edge(2,4);
    add_edge(2,5);
    add_edge(4,5);
    add_edge(5,3);
    ans=n+1;//max length of the cycle assumed
    for(int i=1;i<=n;i++){
        //do bfs using every vertex as source node  so complexity goes to O(n^2)
        bfs(i,n,ans);
    
    }
    //ans is not updated then it means no cycle is present
    if(ans==n+1){
        cout<<"No cycle is present";
    }
    else{
        cout<<"Minimum cycle present is of length "<<ans<<" units"<<endl;
    }
    return 0;
}
